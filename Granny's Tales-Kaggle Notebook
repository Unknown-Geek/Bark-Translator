{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install dash dash-bootstrap-components gtts transformers torch Pillow opencv-python plotly","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from dash import Dash, html, dcc, Input, Output, State, callback\nimport dash_bootstrap_components as dbc\nfrom flask import Flask\nimport torch\nfrom transformers import AutoModelForImageCaption, AutoProcessor, pipeline\nfrom PIL import Image\nimport io\nimport base64\nimport random\nfrom gtts import gTTS\nimport os\nimport numpy as np\nfrom datetime import datetime\nimport cv2\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Initialize Dash app\napp = Dash(__name__, external_stylesheets=[dbc.themes.DARKLY])\n\n# Load models\ndef load_models():\n    processor = AutoProcessor.from_pretrained(\"Salesforce/blip-image-captioning-base\")\n    caption_model = AutoModelForImageCaption.from_pretrained(\"Salesforce/blip-image-captioning-base\")\n    story_generator = pipeline('text-generation', \n                             model='huggingface/gpt2-horror-story',\n                             max_length=200)\n    # Add emotion detection model\n    emotion_classifier = pipeline('image-classification', \n                                model='dima806/facial_emotions_image_detection')\n    return processor, caption_model, story_generator, emotion_classifier\n\nprocessor, caption_model, story_generator, emotion_classifier = load_models()\n\n# New Feature: Supernatural Entity Detection\ndef detect_supernatural_entities(image_array):\n    \"\"\"Simulate supernatural entity detection using basic image processing\"\"\"\n    # Convert to grayscale\n    gray = cv2.cvtColor(image_array, cv2.COLOR_RGB2GRAY)\n    \n    # Detect edges\n    edges = cv2.Canny(gray, 100, 200)\n    \n    # Find contours\n    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    \n    # Random \"supernatural\" detection based on image features\n    entities = []\n    for contour in contours:\n        area = cv2.contourArea(contour)\n        if area > 100:  # Arbitrary threshold\n            x, y, w, h = cv2.boundingRect(contour)\n            supernatural_type = random.choice([\n                \"Spectral Anomaly\",\n                \"Shadow Figure\",\n                \"Ectoplasmic Residue\",\n                \"Time Slip Echo\",\n                \"Dimensional Rift\"\n            ])\n            entities.append({\n                \"type\": supernatural_type,\n                \"confidence\": round(random.uniform(0.6, 0.99), 2),\n                \"location\": f\"({x}, {y})\"\n            })\n    return entities[:3]  # Limit to 3 most significant \"detections\"\n\n# New Feature: Generate Cursed Metadata\ndef generate_cursed_metadata(image):\n    \"\"\"Generate spooky metadata for the image\"\"\"\n    # Simulate cursed EXIF data\n    cursed_dates = [\n        \"13:13:13 on Friday the 13th\",\n        \"03:33 AM during a blood moon\",\n        \"Midnight during the winter solstice\",\n        \"During the witching hour\"\n    ]\n    \n    supernatural_locations = [\n        \"Unknown cemetery\",\n        \"Abandoned asylum\",\n        \"Forgotten village\",\n        \"Ancient burial ground\",\n        \"Mysterious forest\"\n    ]\n    \n    return {\n        \"Cursed_Timestamp\": random.choice(cursed_dates),\n        \"Supernatural_Location\": random.choice(supernatural_locations),\n        \"Ethereal_Energy\": f\"{random.randint(666, 999)} mHz\",\n        \"Spirit_Activity_Level\": f\"{random.randint(70, 100)}%\",\n        \"Dimensional_Anomalies\": random.randint(1, 5)\n    }\n\n# New Feature: Generate Granny's Mood\ndef generate_granny_mood(story_text):\n    \"\"\"Generate Granny's mood based on story content\"\"\"\n    spooky_words = ['ghost', 'haunted', 'dark', 'scary', 'horror']\n    mood_score = sum(word in story_text.lower() for word in spooky_words)\n    moods = [\n        \"Suspiciously cheerful\",\n        \"Eerily calm\",\n        \"Mysteriously knowing\",\n        \"Unnervingly excited\",\n        \"Cryptically amused\"\n    ]\n    return random.choice(moods)\n\n# Layout\napp.layout = dbc.Container([\n    dbc.Row([\n        dbc.Col([\n            html.H1(\"ðŸ‘µ Granny's Cursed Photo Album ðŸ“¸\", \n                   className=\"text-center mb-4\",\n                   style={'color': '#bb0000'}),\n            html.P(\"*Oh dearie, let Granny examine your mysterious photos...*\",\n                  className=\"text-center font-italic\")\n        ])\n    ]),\n    \n    dbc.Row([\n        dbc.Col([\n            dcc.Upload(\n                id='upload-image',\n                children=html.Div([\n                    'Drag and Drop or ',\n                    html.A('Select a Cursed Image')\n                ]),\n                style={\n                    'width': '100%',\n                    'height': '60px',\n                    'lineHeight': '60px',\n                    'borderWidth': '1px',\n                    'borderStyle': 'dashed',\n                    'borderRadius': '5px',\n                    'textAlign': 'center',\n                    'margin': '10px'\n                }\n            ),\n        ])\n    ]),\n    \n    dbc.Row([\n        dbc.Col([\n            html.Div(id='output-image-upload'),\n            dcc.Loading(\n                id=\"loading-1\",\n                type=\"circle\",\n                children=html.Div(id='supernatural-analysis')\n            )\n        ], width=6),\n        dbc.Col([\n            html.Div(id='story-output'),\n            html.Div(id='audio-output'),\n            dcc.Graph(id='mood-gauge')\n        ], width=6)\n    ]),\n    \n    dbc.Row([\n        dbc.Col([\n            html.Div(id='cursed-metadata', className=\"mt-4\")\n        ])\n    ]),\n    \n    # New Feature: Granny's Mood Tracker\n    dbc.Row([\n        dbc.Col([\n            html.Div(id='granny-mood', className=\"mt-4\")\n        ])\n    ]),\n    \n    # Interactive Elements\n    dbc.Row([\n        dbc.Col([\n            html.H4(\"Rate Granny's Tale\", className=\"text-center mt-4\"),\n            dbc.ButtonGroup([\n                dbc.Button(\"ðŸ˜± Terrifying!\", id=\"btn-terrifying\", color=\"danger\"),\n                dbc.Button(\"ðŸ‘» Spooky\", id=\"btn-spooky\", color=\"warning\"),\n                dbc.Button(\"â˜• Need Tea\", id=\"btn-tea\", color=\"success\")\n            ], className=\"d-flex justify-content-center\")\n        ])\n    ])\n], fluid=True, style={'backgroundColor': '#1a1a1a', 'minHeight': '100vh', 'color': '#ffffff'})\n\n@callback(\n    [Output('output-image-upload', 'children'),\n     Output('supernatural-analysis', 'children'),\n     Output('story-output', 'children'),\n     Output('audio-output', 'children'),\n     Output('cursed-metadata', 'children'),\n     Output('granny-mood', 'children'),\n     Output('mood-gauge', 'figure')],\n    Input('upload-image', 'contents'),\n    State('upload-image', 'filename')\n)\ndef update_output(contents, filename):\n    if contents is None:\n        return [None] * 7\n\n    # Decode and process image\n    content_type, content_string = contents.split(',')\n    decoded = base64.b64decode(content_string)\n    image = Image.open(io.BytesIO(decoded))\n    \n    # Generate caption and story\n    caption = generate_caption(image)\n    story = generate_horror_story(caption)\n    spooky_story = add_granny_flavor(story)\n    \n    # Generate audio\n    tts = gTTS(text=spooky_story, lang='en', tld='co.uk', slow=True)\n    audio_path = \"granny_story.mp3\"\n    tts.save(audio_path)\n    \n    # Detect supernatural entities\n    image_array = np.array(image)\n    entities = detect_supernatural_entities(image_array)\n    \n    # Generate cursed metadata\n    metadata = generate_cursed_metadata(image)\n    \n    # Generate Granny's mood\n    granny_mood = generate_granny_mood(spooky_story)\n    \n    # Create mood gauge\n    mood_score = random.randint(60, 100)\n    gauge_fig = go.Figure(go.Indicator(\n        mode = \"gauge+number\",\n        value = mood_score,\n        title = {'text': \"Spooky Meter\"},\n        gauge = {\n            'axis': {'range': [None, 100]},\n            'bar': {'color': \"darkred\"},\n            'steps': [\n                {'range': [0, 50], 'color': \"gray\"},\n                {'range': [50, 75], 'color': \"darkgray\"},\n                {'range': [75, 100], 'color': \"black\"}\n            ]\n        }\n    ))\n    \n    # Prepare outputs\n    image_div = html.Div([\n        html.Img(src=contents, style={'width': '100%'}),\n        html.H5(f\"Original Caption: {caption}\", className=\"mt-3\")\n    ])\n    \n    supernatural_div = html.Div([\n        html.H4(\"ðŸ”® Supernatural Entity Detection\", className=\"mt-3\"),\n        html.Ul([html.Li(f\"{e['type']} detected at {e['location']} \"\n                        f\"(Confidence: {e['confidence']*100}%)\") \n                for e in entities])\n    ])\n    \n    story_div = html.Div([\n        html.H4(\"ðŸ‘µ Granny's Tale\", className=\"mt-3\"),\n        html.P(spooky_story.split('\\n'), style={'whiteSpace': 'pre-line'})\n    ])\n    \n    audio_div = html.Div([\n        html.Audio(src=audio_path, controls=True, className=\"mt-3\")\n    ])\n    \n    metadata_div = html.Div([\n        html.H4(\"ðŸ“œ Cursed Metadata\", className=\"mt-3\"),\n        html.Ul([html.Li(f\"{k}: {v}\") for k, v in metadata.items()])\n    ])\n    \n    mood_div = html.Div([\n        html.H4(\"ðŸ‘µ Granny's Current Mood\", className=\"mt-3\"),\n        html.P(granny_mood, className=\"font-italic\")\n    ])\n    \n    return (image_div, supernatural_div, story_div, audio_div, \n            metadata_div, mood_div, gauge_fig)\n\nif __name__ == '__main__':\n    app.run_server(debug=True)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}